This chapter of the Pragmatic Programmer has a lot to do with testing, in terms of making sure our programs are efficient and can combat overlooked features of programs. I think that the most important concept to gain from this chapter is that we truly cannot ever fully trust ourselves with a program, not because we will always make mistakes, but because no program is perfect. This includes using exceptions and assertions. I was not quite sure what these were before reading the chapter, but now I have a better idea that these are helpful methods to give us a way to check to make sure that our program doesn't have holes where it can be prevented. The point about making sure we throw exceptions only when necessary, not just because it could be helpful was interesting and would not have crossed my mind. To me this runs similar to over-commenting. While comments are good, having too many of them can be problematic. 
Reading this chapter I was a bit confused about the section titled Dead Programs Tell No Lies. I don't quite understand what crashing is exactly. By that I mean forcing a program to crash. I thought that was just something that happened when the proper requirements weren't met. Signalling a crash would be excellent, though, because it prevents the program from crashing or being in an even worse place than before.  
